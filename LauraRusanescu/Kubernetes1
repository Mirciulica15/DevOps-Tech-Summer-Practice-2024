# Detailed Notes - Part 1

## Main K8s Components (22:29)

- **Pods:**
  - The smallest and simplest Kubernetes object.
  - A Pod can encapsulate one or more containers, which share the same network namespace.
  - Containers in a Pod can communicate with each other using `localhost` and share storage volumes.

- **Nodes:**
  - Physical or virtual machines that run Kubernetes workloads.
  - Each node contains the necessary services to run Pods, including:
    - **Kubelet:** Ensures containers are running in Pods.
    - **Container Runtime:** Software responsible for running containers (e.g., Docker, containerd).
    - **Kube-Proxy:** Maintains network rules on nodes, handling network communication to Pods.

- **Clusters:**
  - A set of nodes grouped together to run containerized applications.
  - Consists of:
    - **Control Plane:** Manages the state of the cluster and ensures the desired state of the system.
    - **Nodes:** Actual machines that run the applications and services.

- **Namespaces:**
  - Virtual clusters within a Kubernetes cluster that help isolate resources and manage them more efficiently.
  - Useful for separating environments (e.g., development, staging, production) or teams.

- **Deployments:**
  - Manage the deployment of Pods and ensure that the desired number of Pods are running.
  - Provide features like rolling updates and rollbacks.
  - Defined in a Deployment YAML file, specifying the desired state and update strategy.

- **Services:**
  - Abstractions that define a set of Pods and provide a stable network endpoint to access them.
  - Types of Services include:
    - **ClusterIP:** Exposes the service on a cluster-internal IP. Only accessible within the cluster.
    - **NodePort:** Exposes the service on each node’s IP at a static port. Accessible externally.
    - **LoadBalancer:** Creates an external load balancer in a cloud provider and routes traffic to the service.
    - **Headless Service:** No load balancing and no cluster IP. Useful for service discovery.

## K8s Architecture (34:47)

- **Control Plane:**
  - **API Server:** Serves the Kubernetes API and is the entry point for all administrative tasks.
  - **Controller Manager:** Watches the state of the cluster through the API server and makes or requests changes to ensure the desired state.
  - **Scheduler:** Assigns Pods to Nodes based on resource availability and constraints.
  - **etcd:** A distributed key-value store that holds the state and configuration of the cluster.

- **Nodes:**
  - **Kubelet:** Ensures that containers are running as expected in each Pod and communicates with the control plane.
  - **Container Runtime:** Software used to run containers (e.g., Docker, containerd).
  - **Kube-Proxy:** Manages network routing for Services and load-balances traffic across Pods.

- **etcd:**
  - A consistent and highly-available key-value store used to store all cluster data, including configuration and state information.
  - Ensures that the cluster’s state is consistent and reliable.

- **Kubelet:**
  - Runs on each Node and ensures that the containers are running in the Pods as specified by the API server.
  - Reports the status of Pods and their containers back to the control plane.

- **Kube-Proxy:**
  - Handles network traffic routing for Services.
  - Ensures that network requests are properly routed to the appropriate Pods.

## Minikube and kubectl - Local Setup (44:52)

- **Minikube:**
  - A tool that creates a local Kubernetes cluster on your machine, ideal for development and testing.
  - Supports various drivers (e.g., VirtualBox, Docker).
  - Command to start Minikube: `minikube start --driver=<driver>` (e.g., `minikube start --driver=virtualbox`).

- **kubectl:**
  - The command-line tool for interacting with Kubernetes clusters.
  - Allows you to create, update, delete, and get information about Kubernetes resources.
  - Basic commands include:
    - `kubectl get <resource>`: Lists resources (e.g., `kubectl get pods` lists all Pods).
    - `kubectl describe <resource>`: Shows detailed information about a specific resource.
    - `kubectl create -f <file.yaml>`: Creates a resource based on a YAML configuration file.
    - `kubectl apply -f <file.yaml>`: Applies changes to resources as defined in a YAML file.
    - `kubectl delete <resource>`: Deletes a specified resource.

## Main Kubectl Commands - K8s CLI (1:02:03)

- **Basic Commands:**
  - `kubectl get <resource>`: Retrieves a list of resources (e.g., `kubectl get pods` for Pods).
  - `kubectl describe <resource>`: Provides detailed information about a resource, including events and status.
  - `kubectl create -f <file.yaml>`: Creates a resource from a YAML configuration file.
  - `kubectl apply -f <file.yaml>`: Applies changes to a resource based on a YAML file, allowing for updates and creation.
  - `kubectl delete <resource>`: Removes a resource from the cluster.

## K8s YAML Configuration File (1:16:16)

- **Structure:**
  - **apiVersion:** Specifies the version of the Kubernetes API to use (e.g., `v1`, `apps/v1`).
  - **kind:** Defines the type of resource (e.g., `Pod`, `Deployment`).
  - **metadata:** Contains metadata about the resource, such as its name, namespace, and labels.
  - **spec:** Defines the desired state of the resource, including specifications for containers, volumes, and other configurations.

